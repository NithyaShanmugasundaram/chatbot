{"version":3,"sources":["components/Header.js","components/ChatList.js","components/UserInput.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","ChatList","style","listStyleType","this","props","chats","map","chat","index","key","productId","price","UserInput","onSubmit","onChange","placeholder","value","input","type","tempData","App","state","data","handleSubmit","console","log","_this","handleChange","e","setState","target","components_Header","components_ChatList","components_UserInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNASeA,mLALP,OAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iEAAgEH,EAAAC,EAAAC,cAAA,oCAH3EE,aC2BNC,mLAvBP,OAASL,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAACC,cAAc,SAAUC,KAAKC,MAAMC,MAAMC,IAAI,SAACC,EAAKC,GAC3D,OAAOb,EAAAC,EAAAC,cAAA,OAAKY,IAAKD,GACbb,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACTS,EAAKG,WAEff,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BS,EAAKI,oBAXxCZ,aCkBRa,mLAfP,OACAjB,EAAAC,EAAAC,cAAA,QAAMgB,SAAUV,KAAKC,MAAMS,SAC3Bf,UAAU,sDACVH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uFACjBgB,SAAUX,KAAKC,MAAMU,SACrBC,YAAY,kCACZC,MAAOb,KAAKC,MAAMa,MAClBC,KAAK,SACLvB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gIAAgIoB,KAAK,mBAXtInB,aCDXoB,EAAU,CACnB,CAAKT,UAAW,gCAAoCC,MAAO,WAC3D,CAAKD,UAAW,mBAAuBC,MAAO,YCgCnCS,oNA3BbC,MAAQ,CACNC,KAAK,GACLL,MAAM,MAMPM,aAAa,WACZC,QAAQC,IAAIC,EAAKL,UAElBM,aAAa,SAACC,GACbF,EAAKG,SAAS,CAACZ,MAAMW,EAAEE,OAAOd,4FAN7Bb,KAAK0B,SAAS,CAACP,KAAKH,qCASrB,OAASxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACvBH,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAAW3B,MAAOF,KAAKkB,MAAMC,OAC7B3B,EAAAC,EAAAC,cAACoC,EAAD,CAAW1B,KAAMJ,KAAKkB,MAAMJ,MACtBJ,SAAUV,KAAKoB,aACfT,SAAUX,KAAKwB,aACfX,MAAOb,KAAKkB,MAAMJ,gBAtBXlB,oBCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f03fe81.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Header extends Component {\n    \n    render() { \n        return ( <div className=\"flex items-center arial justify-center pa4 bg-light-blue navy\"><strong>CHAT BOT!!</strong>\n        </div> );\n    }\n}\n \nexport default Header;\n","import React, { Component } from 'react';\nclass ChatList extends Component {\n\n    render() { \n        \n        return ( <div>\n            <ul style={{listStyleType:\"none\"}}>{this.props.chats.map((chat,index)=>{\n                return <div key={index} >\n                    <li>\n                    <div className=\"ba black #000000 bg-light-blue br2 shadow-3 ma2\"> \n                         {chat.productId}\n                </div>\n                <div className=\"  bg-grey  shadow-2 ma2\">{chat.price}</div>\n                \n                </li>\n                </div>\n            })}\n            </ul>\n            \n            </div>\n            \n            \n            \n                \n            );\n    }\n}\n \nexport default ChatList;","import React, { Component } from 'react';\nclass UserInput extends Component {\n    \n    render() { \n        return ( \n        <form onSubmit={this.props.onSubmit}\n        className=\"bg-light-blue mw8 center pa5 br2-ns ba b--black-10\">        \n        <input className=\"f6 f5-l  bn fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns\"\n        onChange={this.props.onChange}          \n        placeholder=\"Type your message and hit ENTER\"  \n        value={this.props.input}        \n        type=\"text\" /> \n        <input className=\"f6 f5-l button-reset fl pv3 tc bn bg-animate bg-black-70 hover-bg-black white pointer w-100 w-25-m w-20-l br2-ns br--right-ns\" type=\"submit\" />     \n        </form>    \n        ) \n     \n    }\n}\n \nexport default UserInput;","export const tempData= [  \n    {    productId: \"What is the price of Samsung?\",    price: \"HKD 400\"  }, \n    {    productId: \" what about HTC?\",    price: \"HKD 500\"  }]","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport ChatList from './components/ChatList';\nimport UserInput from './components/UserInput';\nimport {tempData} from './data';\nimport './App.css';\nclass App extends Component {\n  state = { \n    data:[],\n    input:\"\"\n\n   }\n   componentDidMount(){\n     this.setState({data:tempData})\n   }\n   handleSubmit=()=>{\n    console.log(this.state);\n   }\n   handleChange=(e)=>{\n    this.setState({input:e.target.value})\n   }\n  render() { \n    return ( <div className=\"app\">       \n     <Header />        \n     <ChatList  chats={this.state.data}/>        \n     <UserInput chat={this.state.input}\n           onSubmit={this.handleSubmit} \n           onChange={this.handleChange} \n           value={this.state.input} />    \n     </div>   \n      )  } \n  \n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}